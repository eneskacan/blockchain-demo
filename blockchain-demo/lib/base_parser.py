#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import generator_stop

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu, leftrec, nomemo
from tatsu.parsing import leftrec, nomemo  # noqa
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}  # type: ignore


class BAASBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=True,
        namechars='',
        **kwargs
    ):
        super().__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class BAASParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=True,
        left_recursion=True,
        parseinfo=True,
        keywords=None,
        namechars='',
        tokenizercls=BAASBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super().__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            tokenizercls=tokenizercls,
            **kwargs
        )

    @tatsumasu()
    def _start_(self):  # noqa
        self._statement_()
        self._check_eof()

    @tatsumasu()
    def _statement_(self):  # noqa
        self._command_()
        self.name_last_node('command')
        self.ast._define(
            ['command'],
            []
        )

    @tatsumasu()
    def _command_(self):  # noqa
        with self._choice():
            with self._option():
                self._transfer_()
            with self._option():
                self._create_()
            self._error('expecting one of: create transfer')

    @tatsumasu()
    def _transfer_(self):  # noqa
        self._token('transfer')
        self._amount_()
        self.name_last_node('amount')
        self._string_()
        self.name_last_node('coinname')
        self._token('from')
        self._string_()
        self.name_last_node('sender')
        self._token('to')
        self._string_()
        self.name_last_node('receiver')
        self.ast._define(
            ['amount', 'coinname', 'receiver', 'sender'],
            []
        )

    @tatsumasu()
    def _amount_(self):  # noqa
        self._number_()

    @tatsumasu()
    def _create_(self):  # noqa
        self._token('create')
        self._type_()

    @tatsumasu()
    def _type_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('coin')
                self._string_()
                self.name_last_node('coinname')
            with self._option():
                self._token('user')
                self._string_()
                self.name_last_node('username')
            self._error('expecting one of: coin user')
        self.ast._define(
            ['coinname', 'username'],
            []
        )

    @tatsumasu()
    def _number_(self):  # noqa
        self._pattern('\\d+')

    @tatsumasu()
    def _string_(self):  # noqa
        self._pattern('[\\w\\.-]+')


class BAASSemantics(object):
    def start(self, ast):  # noqa
        return ast

    def statement(self, ast):  # noqa
        return ast

    def command(self, ast):  # noqa
        return ast

    def transfer(self, ast):  # noqa
        return ast

    def amount(self, ast):  # noqa
        return ast

    def create(self, ast):  # noqa
        return ast

    def type(self, ast):  # noqa
        return ast

    def number(self, ast):  # noqa
        return ast

    def string(self, ast):  # noqa
        return ast


def main(filename, start=None, **kwargs):
    if start is None:
        start = 'start'
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = BAASParser()
    return parser.parse(text, rule_name=start, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, BAASParser, name='BAAS')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()
